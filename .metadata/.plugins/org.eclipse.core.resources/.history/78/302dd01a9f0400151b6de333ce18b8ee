package com.example.cityguide;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Document;

import com.example.cityguide.entity.Place;
import com.example.cityguide.others.GridImage;
import com.example.cityguide.others.JSONParser;
import com.example.cityguide.others.MyLocation;
import com.example.cityguide.R;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.drawable.ColorDrawable;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.maps.model.LatLng;

public class HomeActivity extends DrawerActivity implements LocationListener {

	GridView Grid;
	ArrayList<GridImage> gridArray = new ArrayList<GridImage>();
	GridAdapter GridViewAdapter;
	ProgressDialog pDialog;
	public static List<Place> placesList = new ArrayList<Place>();
	static int responseCount;
	static String type;
	JSONObject responseObj;
	boolean connectionOK ;
	Bitmap place2Image;
	JSONParser parser = new JSONParser();
	private static final String placesURL = SplashScreen.SERVER_IP+ "project/getPlacesType.php";
	
	LocationManager locationManager;

	LatLng myLatLng, placeLatLng;
	MyLocation loc;
	Location myLoc;

	Document mapDoc;
	String provider;
	Criteria criteria = new Criteria();

	@Override
	protected void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
/*		getActionBar().setIcon(
				   new ColorDrawable(getResources().getColor(android.R.color.transparent)));*/ 
		ImageView view = (ImageView) findViewById(android.R.id.home);
		view.setPadding(5, 0, 2, 0); // left, top, right, bottom
		Log.i("Home_activity", "Home activity started");

		Grid = (GridView) findViewById(R.id.gridView);

		gridArray.add(new GridImage(R.drawable.ic_car, "Car Rental"));
		gridArray.add(new GridImage(R.drawable.ic_doctor, "Doctor"));
		gridArray.add(new GridImage(R.drawable.ic_hotel, "Hotel"));
		gridArray.add(new GridImage(R.drawable.ic_people, "People"));
		gridArray.add(new GridImage(R.drawable.ic_restaurant, "Restaurant"));
		gridArray.add(new GridImage(R.drawable.ic_tourist, "Tourist Place"));

		locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		
		Log.i("Home_activity", "initialise location manager"");

		provider = this.locationManager.getBestProvider(criteria, true);

		while (myLoc == null) {
			locationManager.requestLocationUpdates(
					LocationManager.GPS_PROVIDER, 2000, 10, this);
			myLoc = locationManager.getLastKnownLocation(provider);

			if (myLoc != null) {
				double myLat = myLoc.getLatitude();
				double myLon = myLoc.getLongitude();
				// myLoc = loc.getLocation();
				Log.i("Current location ", "" + myLat + ", "
						+ myLon);

				myLatLng = new LatLng(myLat, myLon);
				locationManager.removeUpdates(this);
			}
		}

		GridViewAdapter = new GridAdapter();
		Grid.setAdapter(GridViewAdapter);
		Grid.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> parent, View v, int pos,
					long id) {
				placesList = new ArrayList<Place>();
				onGridViewClick(pos);
			}
		});
	} // end onCreate

	@Override
	protected int getLayout() {
		return R.layout.activity_main;
	}

	class GridAdapter extends ArrayAdapter<GridImage> {

		public GridAdapter() {
			super(getApplicationContext(), R.layout.gridview_layout, gridArray);
		}// end constructor

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View itemView = convertView;
			if (itemView == null) {
				itemView = getLayoutInflater().inflate(
						R.layout.gridview_layout, parent, false);
			}
			GridImage currentIcon = gridArray.get(position);
			ImageView imageView = (ImageView) itemView
					.findViewById(R.id.item_image);
			TextView textView = (TextView) itemView
					.findViewById(R.id.item_text);
			imageView.setImageResource(currentIcon.getImageId());
			textView.setText(currentIcon.imageName);
			return itemView;
		}

	}// end class MyGridAdapter

	public void onGridViewClick(int position) {
		/*
		 * Intent categoryIntent = new Intent(this, MenuActivity.class); type =
		 * gridArray.get(position).getImageName();
		 * categoryIntent.putExtra("Type", type); startActivity(categoryIntent);
		 */
		if (isOnline()) {
			type = gridArray.get(position).getImageName();
			if(type.equals("People")){
				Intent intent = new Intent(getApplicationContext(), PeopleActivity.class);
				startActivity(intent);
			}else{
				new places().execute();
			}
			

		} else {
			Toast.makeText(getApplicationContext(),
					"You need to switch on wifi or data connection ",
					Toast.LENGTH_LONG).show();
		}// end else check for connection

	}// end onGridViewClick()

	private void setPlaces(List<Place> newList) {
		this.placesList = newList;
	}// end SetPlaces()

	public static List<Place> getPlaces() {
		return placesList;
	}// end getPlaces

	// check for internet connection
	public boolean isOnline() {
		ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo netInfo = cm.getActiveNetworkInfo();
		return netInfo != null && netInfo.isConnectedOrConnecting();
	}

	public static String getType() {
		return type;
	}

	class places extends AsyncTask<Void, Void, Void> {

		@Override
		protected void onPreExecute() {
			pDialog = new ProgressDialog(HomeActivity.this);
			pDialog.setMessage("Loading " + type + ".....");
			pDialog.setIndeterminate(false);
			pDialog.setCancelable(false);
			pDialog.show();
		}// end onPreExcute()

		@Override
		protected Void doInBackground(Void... arg0) {
			
			try{
				List<NameValuePair> params = new ArrayList<NameValuePair>();
				params.add(new BasicNameValuePair("type", type));
				params.add(new BasicNameValuePair("startLat", myLoc.getLatitude() + ""));
				params.add(new BasicNameValuePair("startLong", myLoc.getLongitude() + ""));
				
				responseObj = parser.makeHttpRequest(placesURL, "POST", params);
				
				Log.i("place gps","lat : "+myLoc.getLatitude()+ "lng: "+myLoc.getLongitude());
				
				try {
					if (isOnline()) {
						
						Log.i("Response Type", type);
						Log.i("Response object", responseObj.toString());

						responseCount = responseObj.getInt("count");					
						String responseStatus = responseObj.getString("status");
					
						Log.i("Response status : ", responseStatus);					
						Log.i("response count", String.valueOf(responseCount));
						
						//	check number of places available			
						if (responseCount > 0) {						
							JSONArray placesArray = responseObj.getJSONArray("places");						
							connectionOK = true;
							
							try{					
								for (int i = 0; i < responseCount; i++) {										
									JSONObject obj = placesArray.getJSONObject(i);	
									
									//getting all information about a place
									String id = obj.getString("place_id");							
									String icon = obj.getString("icon");						
									String name = obj.getString("name");							
									double latitude = obj.getDouble("latitude");							
									double longitude = obj.getDouble("longitude");
									
									JSONArray typeArray = obj.getJSONArray("types").getJSONArray(0);
													
									ArrayList<String> typesArrayList = new ArrayList<String>();

									for (int j = 0; j < typeArray.length(); j++) {
										String placeType = typeArray.getString(j);									
										if (!(placeType.equals("establishment"))) {
											typesArrayList.add(placeType);																										
										}						
									}// end for loop
									
									//creating new object of the class Place									
									Place newPlace = new Place(id, type, name, icon,latitude, longitude);
									newPlace.setTypes(typesArrayList);
							
									// get place image from server						
									String imageURL = newPlace.getIcon();							
									Bitmap image = parser.getImage(imageURL);
														
									if (image == null)								
										Log.i("response image", "image is null");
									
									newPlace.setImage(image);
									
									List<NameValuePair> pr = new ArrayList<NameValuePair>();
									pr.add(new BasicNameValuePair("startLat", myLoc								
											.getLatitude() + ""));
									pr.add(new BasicNameValuePair("startLong", myLoc
									.getLongitude() + ""));								
									pr.add(new BasicNameValuePair("endLat", latitude
									+ ""));
									pr.add(new BasicNameValuePair("endLong", longitude
									+ ""));
									
									JSONObject object = parser.makeHttpRequest(SplashScreen.SERVER_IP
											+ "project/getLocationDetails.php","POST", pr);
													
									String dist = object.getString("distance");
									// Calculating distance between user and the place
									newPlace.setDistance(Double.parseDouble(String
											.format("%.2f",Double.parseDouble(dist) / 1000)));
									
									placesList.add(newPlace);								
								}// end loop in placeArray															
							}
							
							catch(Exception e){
								connectionOK = false;								
							}
					}// End if statement if no data corresponding to type is found in database										
					}// end if error in connection									
				} catch (JSONException e) {
					e.printStackTrace();				
				}// end try-catch statement
				
			}catch(Exception e){
				connectionOK =false;
			}			
			return null;
		}// end doInBackground()

		@Override
		protected void onPostExecute(Void result) {
			
			pDialog.dismiss();			
			if (connectionOK) {				
				if (placesList.size() > 0) {
					for (Place place : placesList) {
						double placelat = place.getLatitude();
						double placelon = place.getLongitude();
						
						placeLatLng = new LatLng(placelat, placelat);
						Location placeLoc = new Location("");
						placeLoc.setLatitude(placelat);
						placeLoc.setLongitude(placelon);											
					}// end for loop
					
					Intent categoryIntent = new Intent(HomeActivity.this,MenuActivity.class);
					categoryIntent.putExtra("Type", type);
					startActivity(categoryIntent);				
				} else {
					Toast.makeText(getApplicationContext(),
							"No result found for : " + type, Toast.LENGTH_LONG)
							.show();					
				}// No REcord				
			}// End if statement if no data corresponding to type is found in database
			
			else {				
				Toast.makeText(getApplicationContext(),
						"Unable to connect to Server ",Toast.LENGTH_LONG).show();				
			}// end else check for connection
			responseObj = null;
		}// end onPostExecute()
	}// end AsyncTask

	@Override
	public void onLocationChanged(Location location) {
		myLoc = location;
	}

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub
	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub
	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub
	}
}// End Activity
